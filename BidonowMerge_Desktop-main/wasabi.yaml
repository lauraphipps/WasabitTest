# This workflow will build and push a node.js application to an Azure Web App when a release is created.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. For Linux apps, add an app setting called WEBSITE_WEBDEPLOY_USE_SCM and set it to true in your app **before downloading the file**.
#      For more instructions see: https://docs.microsoft.com/azure/app-service/configure-common#configure-app-settings
#
# 2. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
#Push jobe and instructions below for the static site
name: Production Build #
on: #key to trigger on push to your devlopement branch and when a pull request is opened:
  push:
    branches:
      - main # can set up as many branches or files, depending on what I want to trigger
#Above will trigger the workflow file for the steps outlined below
jobs: #where we need to add the functions that will be performed after the push. 
  build-and-deploy: #Job type task
    name: Build and Deploy #Identifier
    runs-on: ubuntu-latest #this outlines the virtual instance we will be runninng on our app and for this example we can remain with the default. However, we should add in the node version we want running using the strategy and matrix keys
    env:
      AWS_S3_BUCKET_NAME: bidonowstatic     # set this to your application's name
      AWS_CF_DISTRIBUTION_ID: E2CCJSFEMQEZBM #cloud front id name, set this to the path to your web app project, defaults to the repository root
    strategy: # set this to the path to your web app project, defaults to the repository root
     matrix: 
      NODE_VERSION: [14.x] # set this to the node version to use it is not triggered yet. Not necessary, but ensures the app works with the persepctive versions, can remove them or add more options.
 
    steps: # a set of step tasks for deploying the app. It is the actions taking for deploying the site. The steps key outlines the steps the workflow will make its way through
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }} # sets up Node to the environment using the Node version we defined in the matrix durig the strategy step. This action references ${{ matrix.node-version }}, and will run for as many versions of Node defined in the matrix array.
        uses: actions/setup-node@v1
        with:
         node-version: ${{ matrix.node-version }}
      - uses: jakejarvis/s3-sync-action@master # deployment step using a Github Action called s3-sync-action@master by jakejarvis. The Action takes your compiled application and sends it to a designated S3 bucket using pre-defined environment variables (more on them later). Using the uses key once again, this is all we need to do to import the Action
        name: Upload Static Site to S3 Bucket
        with: #then using the with key we utilise the relevant arguments that are required when uploading to S3:
          args: --delete # --acl public-read assuming your S3 bucket is configured to be publicly readable, this will ensure that the uploaded files are too. --delete: this deletes any files within the S3 bucket that do not exist in the uploaded files.
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-2"
          SOURCE_DIR: ./ # Push Everything from the root of the repo to S3
          DEST_DIR: "Test"
      - name: Install Dependencies, build, and test # name of the next set of tasks
        run: |
             npm install express compat
             npm install
             npm run build --if-present
             #npm run test --if-present
      - name: Build Appilcation
        run:  npm run-script build --if-present
      - name: test
        run:  npm run test --if-present
      - name: Create CloudFront Cache Invalidation
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ env.AWS_CF_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: "us-east-2"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} #updated S3 Permissions.
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #opened this key acess for this commit updated with the updatted aws_access_key_id.
